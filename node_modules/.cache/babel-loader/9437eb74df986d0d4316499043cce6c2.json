{"remainingRequest":"/Users/tina/seven/vue_test/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Users/tina/seven/vue_test/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/tina/seven/vue_test/mock/index.js","dependencies":[{"path":"/Users/tina/seven/vue_test/mock/index.js","mtime":1572506599201},{"path":"/Users/tina/seven/vue_test/node_modules/cache-loader/dist/cjs.js","mtime":1572506601374},{"path":"/Users/tina/seven/vue_test/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":1572506600076},{"path":"/Users/tina/seven/vue_test/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1572506600190}],"contextDependencies":[],"result":["// import Mock from 'mockjs'\n// // import { param2Obj } from '../src/utils'\n// import user from './user'\n// import role from './role'\n// import article from './article'\n// import search from './remote-search'\n// const mocks = [\n//   ...user,\n//   ...role,\n//   ...article,\n//   ...search\n// ]\n// // for front mock\n// // please use it cautiously, it will redefine XMLHttpRequest,\n// // which will cause many of your third-party libraries to be invalidated(like progress event).\n// export function mockXHR() {\n//   // mock patch\n//   // https://github.com/nuysoft/Mock/issues/300\n//   Mock.XHR.prototype.proxy_send = Mock.XHR.prototype.send\n//   Mock.XHR.prototype.send = function() {\n//     if (this.custom.xhr) {\n//       this.custom.xhr.withCredentials = this.withCredentials || false\n//       if (this.responseType) {\n//         this.custom.xhr.responseType = this.responseType\n//       }\n//     }\n//     this.proxy_send(...arguments)\n//   }\n//   function XHR2ExpressReqWrap(respond) {\n//     return function(options) {\n//       let result = null\n//       if (respond instanceof Function) {\n//         const { body, type, url } = options\n//         // https://expressjs.com/en/4x/api.html#req\n//         result = respond({\n//           method: type,\n//           body: JSON.parse(body),\n//           query: param2Obj(url)\n//         })\n//       } else {\n//         result = respond\n//       }\n//       return Mock.mock(result)\n//     }\n//   }\n//   for (const i of mocks) {\n//     Mock.mock(new RegExp(i.url), i.type || 'get', XHR2ExpressReqWrap(i.response))\n//   }\n// }\n// // for mock server\n// const responseFake = (url, type, respond) => {\n//   return {\n//     url: new RegExp(`/mock${url}`),\n//     type: type || 'get',\n//     response(req, res) {\n//       res.json(Mock.mock(respond instanceof Function ? respond(req, res) : respond))\n//     }\n//   }\n// }\n// export default mocks.map(route => {\n//   return responseFake(route.url, route.type, route.response)\n// })",{"version":3,"sources":["/Users/tina/seven/vue_test/mock/index.js"],"names":[],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["// import Mock from 'mockjs'\n// // import { param2Obj } from '../src/utils'\n\n// import user from './user'\n// import role from './role'\n// import article from './article'\n// import search from './remote-search'\n\n// const mocks = [\n//   ...user,\n//   ...role,\n//   ...article,\n//   ...search\n// ]\n\n// // for front mock\n// // please use it cautiously, it will redefine XMLHttpRequest,\n// // which will cause many of your third-party libraries to be invalidated(like progress event).\n// export function mockXHR() {\n//   // mock patch\n//   // https://github.com/nuysoft/Mock/issues/300\n//   Mock.XHR.prototype.proxy_send = Mock.XHR.prototype.send\n//   Mock.XHR.prototype.send = function() {\n//     if (this.custom.xhr) {\n//       this.custom.xhr.withCredentials = this.withCredentials || false\n\n//       if (this.responseType) {\n//         this.custom.xhr.responseType = this.responseType\n//       }\n//     }\n//     this.proxy_send(...arguments)\n//   }\n\n//   function XHR2ExpressReqWrap(respond) {\n//     return function(options) {\n//       let result = null\n//       if (respond instanceof Function) {\n//         const { body, type, url } = options\n//         // https://expressjs.com/en/4x/api.html#req\n//         result = respond({\n//           method: type,\n//           body: JSON.parse(body),\n//           query: param2Obj(url)\n//         })\n//       } else {\n//         result = respond\n//       }\n//       return Mock.mock(result)\n//     }\n//   }\n\n//   for (const i of mocks) {\n//     Mock.mock(new RegExp(i.url), i.type || 'get', XHR2ExpressReqWrap(i.response))\n//   }\n// }\n\n// // for mock server\n// const responseFake = (url, type, respond) => {\n//   return {\n//     url: new RegExp(`/mock${url}`),\n//     type: type || 'get',\n//     response(req, res) {\n//       res.json(Mock.mock(respond instanceof Function ? respond(req, res) : respond))\n//     }\n//   }\n// }\n\n// export default mocks.map(route => {\n//   return responseFake(route.url, route.type, route.response)\n// })\n"]}]}
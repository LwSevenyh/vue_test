/**
 * 省份城市联动树结构重载
 * @author  hugo
 */
import Tree from '../tree.js'

class ProvinceCityTree extends Tree {
  // 设置节点状态,所有对节点的状态都需要通过这个方法
  // withChildren为true时，孩子节点都设为同一状态
  // setAtomStatus (id, status, withChildren = false) {
  //   if (this.atoms[id].status === status) {
  //     return false
  //   }
  //   let _this = this
  //   _this.atoms[id].status = status
  //   let decStatus = status === 1 ? 0 : 1
  //   let parentAtomId = this.atoms[id].parent_atom_id
  //   _this.atoms[parentAtomId].status_children[status]++
  //   _this.atoms[parentAtomId].status_children[decStatus]--
  //   // 设置省份时，需要同时设置城市的状态
  //   if (withChildren) {
  //     _this.setChildrenStatus(id, status)
  //   } else if (_this.atoms[id].type === 'province_ids' && _this.atoms[id].status === 0) {
  //     _this.setChildrenStatus(id, decStatus)
  //   }
  // }

  constructor () {
    super()
    this.region_keys = 'region_ids'
    this.province_keys = 'province_ids'
    this.city_keys = 'city_ids'
  }

  // 动态根据情况设置节点状态以及子节点状态
  autoSetAtomStatus (id, status, type) {
    let _this = this
    let _atom = this.atoms[id]
    if (this.region_keys === type) {
      _this.setAtomStatus(id, status, true)
    } else {
      _this.setAtomStatus(id, status, false)
      // 选中省份城市时，需要设置祖先状态
      // 同一区域下的省份都选中时，区域也设为选中状态
      // 其他情况下，祖先都设为不选中状态
      // 选中省份时，下面所有的城市设为不选中
      if (status === 1 && this.province_keys === type) {
        _this.setChildrenStatus(id, 0)
        if (_this.childrenStatusIsSame(_atom.parent_atom_id, 1)) {
          // _this.atoms[_atom.parent_atom_id].status = 1
          _this.setAtomStatus(_atom.parent_atom_id, status, false)
        }
      } else if (status === 1) {
        _this.setAncestorsStatus(id, 0)
      } else if (status === 0 && this.province_keys === type) {
        // 取消选择省份时，取消选择区域
        _this.setAtomStatus(_this.atoms[id].parent_atom_id, 0, false)
      }
    }
  }

  // 取所有状态为 x 的节点,不取区域类型的
  // getAtomsByStatus (status) {
  //   let _this = this
  //   let result = []
  //   for (let a of _this.atoms) {
  //     if (a.status === status && a.type !== 'region_ids') {
  //       result.push(a)
  //     }
  //   }
  //   return result
  // }
}
// ProvinceCityTree.prototype.__proto__ === Tree.prototype
export default ProvinceCityTree

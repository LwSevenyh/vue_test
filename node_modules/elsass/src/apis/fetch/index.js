/**
 * Created by mickle.jiang on 2017/11/27.
 */
// 接口调用 业务相关
import config from '../../config'
import Fetch from './fetch.js'
// 正常返回
const successResponseJson = (responseJson) => {
  return responseJson
}
// 后台未处理返回 400之类的,错误统一处理
const failResponseJson = (status, responseJson) => {
  if (status === '401' || status === 401) {
  } else if (status === '413' || status === 413) {
    // 这里因为反馈组件等不使用iview样式，不能直接使用Message，TODO：自己封装一个消息提示组件
    alert('您输入的内容过大，当前仅支持输入5M内容。')
    throw new Error('上传超出限制')
  } else if (responseJson.name === 'RepeatRequestError') {
    // console.log(responseJson.message)
    throw responseJson.message
  } else if (status === 'cancle') {
    // 跳转新的路由后 中断上个路由中的所有未完成的请求
    throw responseJson.message
  } else {
    console.log(responseJson)
    alert('请求错误，请联系客服')
    throw new Error('调用接口错误')
  }
}

// 业务默认参数
const defaultOptions = {
  request_method: 'post', // 默认post请求
  use_host: 'feedback_host'
  // use_session: true // 默认使用session
}

export default async(options, params) => {
  let fetch = new Fetch()
  let outOptions = options
  for (let key in defaultOptions) {
    if (options[key] === undefined || options[key] === null) {
      outOptions[key] = defaultOptions[key]
    }
  }
  let url = outOptions['path'] // 接口路径
  if (!url.match('http')) {
    const hostName = outOptions['use_host'] // 接口域名name
    const host = config[hostName] || ''
    url = `${host}/${url}`
  }
  const type = outOptions.request_method
  let result = await fetch.request(type, url, params, outOptions)
  if (result.status === true) {
    return successResponseJson(result.data)
  } else {
    failResponseJson(result.status, result.data)
  }
}
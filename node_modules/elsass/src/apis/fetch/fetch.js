/**
 * 封装接口请求，初始化参数
 * @author  hugo
 */
import config from '../../config/index'
import axios from './http'
import axios1 from 'axios'
let crypto = require('crypto')

class Fetch {
  // 处理传到后台参数(通用)
  dealParams(params, needles = {}) {
    let param = params
    param['visit_info'] = {
      ver: config.version // 前端版本
    } 
    return param
  }

  getHeaders(needles={}){
    let _headers = {
      // 'Content-Type': 'application/json;charset=utf-8',
      // // 'Access-Control-Allow-Origin': '*',
      // 'Accept': '*',
    }
    if (!needles.without_session) {
      // _headers['Authorization'] = getToken()
    }
    return _headers
  }

  // 发起请求
  async request(type, url, params, needles = {}) {
    let _this = this
    // _this.mock() // 使用mock
    const param =  params //this.dealParams(params, needles)
    try {
      let requestH = {
        method: type,
        url: url,
        canRepeat: needles.canRepeat || false, // 处理重复请求
        cancelToken: axios1.CancelToken.source().token, // 取消请求
        headers: this.getHeaders(needles)
      }
      // post和get的传参不一样
      if (type === 'post') {
        requestH.data = param
      } else {
        requestH.params = param
      }
      // axios.axios.defaults.withCredentials = true
      let res = await axios.axios(requestH)
      return _this.dealSuccessResponse(res)
    } catch (e) {
      return _this.dealFailResponse(e)
    }
  }

  // 使用mock
  mock() {
    // require('@/test/mock/login.js')
    // require('@/test/mock/event.js')
  }

  // 使用缓存
  storage() {
    // TODO
  }

  // 解密
  encrypt (text) {
    if (!text) {
      return ''
    }
    let algorithm = 'aes-256-ctr'
    let password = '12345678123456781234567812345678'
    let piv = '1234567890123456'
    try {
      let cipher = crypto.createDecipheriv(algorithm, password, piv)
      let crypted = cipher.update(text, 'base64', 'utf8')
      crypted += cipher.final('utf8')
      return crypted
    } catch (e) {
      console.log(e)
    }
  }

  // 处理返回的正常请求
  dealSuccessResponse(res) {
    let data = res.data
    if (data.data) {
      // 解密数据
      // data.data = JSON.parse(this.encrypt(data.data))
    }
    return { status: true, data: data }
  }

  // 处理异常返回
  dealFailResponse(error) {
    if (error.response) {
      return { status: error.response.status, data: error.response.data }
    } else {
      return { status: 405, data: error }
    }
  }
}

export default Fetch
